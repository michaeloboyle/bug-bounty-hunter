name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and code quality checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install lint dependencies
        run: |
          pip install black isort flake8 mypy
          pip install -r requirements.txt

      - name: Run Black formatter check
        run: black --check --diff engine/ tests/

      - name: Run isort import sorting check
        run: isort --check-only --diff engine/ tests/

      - name: Run flake8 linting
        run: flake8 engine/ tests/ --max-line-length=100 --ignore=E203,W503

      - name: Run mypy type checking
        run: mypy engine/ --ignore-missing-imports

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, mcp]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test results directory
        run: mkdir -p test-results

      - name: Run Unit Tests
        if: matrix.test-type == 'unit'
        run: |
          docker compose --profile testing build test
          docker compose --profile testing run --rm test pytest tests/ -m "unit or not integration" \
            --junitxml=test-results/junit-unit.xml \
            --cov-report=xml:test-results/coverage-unit.xml

      - name: Run Integration Tests
        if: matrix.test-type == 'integration'
        run: |
          docker compose --profile testing build test
          docker compose --profile testing up -d db-test
          docker compose --profile testing run --rm test pytest tests/ -m integration \
            --junitxml=test-results/junit-integration.xml \
            --cov-report=xml:test-results/coverage-integration.xml

      - name: Run MCP Server Tests
        if: matrix.test-type == 'mcp'
        run: |
          docker compose --profile testing build test
          docker compose --profile testing run --rm test pytest tests/test_mcp_server.py -v \
            --junitxml=test-results/junit-mcp.xml \
            --cov-report=xml:test-results/coverage-mcp.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}
          path: test-results/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: always()
        with:
          file: test-results/coverage-${{ matrix.test-type }}.xml
          flags: ${{ matrix.test-type }}
          name: ${{ matrix.test-type }}-coverage

  # End-to-end system tests
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build all containers
        run: docker compose build

      - name: Start full system
        run: |
          docker compose up -d
          # Wait for services to be ready
          sleep 30

      - name: Check service health
        run: |
          # Check API health
          curl -f http://localhost:8080/docs || exit 1
          
          # Check UI is serving
          curl -f http://localhost:4173/ || exit 1
          
          # Check database connectivity
          docker compose exec -T db pg_isready -U postgres || exit 1
          
          # Check Redis connectivity
          docker compose exec -T redis redis-cli ping || exit 1
          
          # Check MinIO connectivity
          curl -f http://localhost:9000/minio/health/live || exit 1

      - name: Run API endpoint tests
        run: |
          # Test core API endpoints
          curl -f http://localhost:8080/programs
          curl -f http://localhost:8080/findings
          curl -f http://localhost:8080/activities
          curl -f http://localhost:8080/mcp/status
          
          # Test scan queue endpoint
          curl -X POST http://localhost:8080/queue \
            -H "Content-Type: application/json" \
            -d '{"program_id": "test-program", "priority": "fast_pay"}' \
            -f

      - name: Run MCP integration test
        run: |
          # Test MCP server container
          docker compose logs mcp
          docker compose exec -T mcp python mcp_server.py --help

      - name: Collect system logs
        if: failure()
        run: |
          mkdir -p logs
          docker compose logs api > logs/api.log
          docker compose logs mcp > logs/mcp.log
          docker compose logs ui > logs/ui.log
          docker compose logs workers > logs/workers.log
          docker compose logs db > logs/db.log

      - name: Upload system logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: system-logs
          path: logs/

      - name: Stop system
        if: always()
        run: docker compose down -v

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r engine/ -f json -o bandit-results.json || true

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.json

  # Build and push container images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        image: [api, mcp, ui]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: kubectl apply, docker compose, etc.

  # Deploy to production (optional)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

  # Generate and publish test report
  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: always()
        with:
          report_paths: '**/junit-*.xml'
          check_name: 'Test Results'
          fail_on_failure: true

      - name: Create test summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count test files
          UNIT_TESTS=$(find . -name "junit-unit.xml" -exec xmllint --xpath "count(//testcase)" {} \; 2>/dev/null || echo "0")
          INTEGRATION_TESTS=$(find . -name "junit-integration.xml" -exec xmllint --xpath "count(//testcase)" {} \; 2>/dev/null || echo "0")
          MCP_TESTS=$(find . -name "junit-mcp.xml" -exec xmllint --xpath "count(//testcase)" {} \; 2>/dev/null || echo "0")
          
          echo "- Unit Tests: $UNIT_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: $INTEGRATION_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- MCP Tests: $MCP_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests: $(($UNIT_TESTS + $INTEGRATION_TESTS + $MCP_TESTS))**" >> $GITHUB_STEP_SUMMARY